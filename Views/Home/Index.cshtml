@{
    ViewData["Title"] = "";
}

<div class="text-center">
    <h1 class="display-4">A collection of Covid-19 screening clinics.</h1>
</div>
<html>
    <head>
        <meta charset="utf-8"/>
        <style>
            .map_wrap, .map_wrap * {margin:0;padding:0;font-family:'Malgun Gothic',dotum,'돋움',sans-serif;font-size:12px;}
            .map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}
            .map_wrap {position:relative;width:100%;height:500px;}
            #menu_wrap {position:absolute;top:0;left:0;bottom:0;width:250px;margin:10px 0 30px 10px;padding:5px;overflow-y:auto;background:rgba(255, 255, 255, 0.7);z-index: 1;font-size:12px;border-radius: 10px;}
            .bg_white {background:#fff;}
            #menu_wrap hr {display: block; height: 1px;border: 0; border-top: 2px solid #5F5F5F;margin:3px 0;}
            #menu_wrap .option{text-align: center;}
            #menu_wrap .option p {margin:10px 0;}  
            #menu_wrap .option button {margin-left:5px;}
        </style>
        <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script>
        var html = [];
            $.getJSON('https://cloudstac.blob.core.windows.net/cloud-container/agencydb.json', function (data) {
                $.each(data, function (i,item) { // 업로드한 json 파일에서 총 8개의 자료를 불러온다.
                    html.push(Number(item.latitude)); // 위도
                    html.push(Number(item.longitude)); // 경도
                    html.push(item.address); // 주소
                    html.push(item.phone_number); // 전화번호
                    html.push(item.agency_name); // 기관명
                    html.push(item.weekday_oph); // 평일 영업시간
                    html.push(item.saturday_oph); // 토요일 영업시간
                    html.push(item.holiday_oph); // 공휴일 영업시간
                });
            });
    </script>
    </head>
    <body>
        <div class="map_wrap">
            <div id="map" style="width:100%;height:100%;position:relative;overflow:hidden;"></div>

            <div id="menu_wrap" class="bg_white">
                <div class="option">
                    <div>
                        <form onsubmit="searchPlaces(); return false;">
                            키워드 : <input type="text" value="이태원 맛집" id="keyword" size="15"> 
                            <button type="submit">검색하기</button> 
                        </form>
                    </div>
                </div>
                <hr>
                <ul id="placesList"></ul>
                <div id="pagination"></div>
            </div>
        </div>
        <div id="map" style="width:100%;height:100vh;"></div>
        <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=ca3e382697d727fbee45c0906c22b0b1&libraries=clusterer&libraries=services"></script>
        <script>
            var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
                mapOption = { 
                    center: new kakao.maps.LatLng(html[0], html[1]), // 지도의 중심좌표
                    level: 5 // 지도의 확대 레벨
                };
            // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다
            var map = new kakao.maps.Map(mapContainer, mapOption);

            // 지도에 교통정보를 표시하도록 지도타입을 추가합니다
            map.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC);

            // 지도에 지형정보를 표시하도록 지도타입을 추가합니다
            map.addOverlayMapTypeId(kakao.maps.MapTypeId.TERRAIN);

            // 마커 클러스터러를 생성한다
            var clusterer = new kakao.maps.MarkerClusterer({
                map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
                averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
                minLevel: 10 // 클러스터 할 최소 지도 레벨
            });

            var markers = [];

            for(var i=0; i<html.length; i++){
                if(i%8==0){ // json 파일에서 불러올 8개의 항목들이 잘 추출되었다면 지도에 마커를 찍는다
                var markerPosition = new kakao.maps.LatLng(html[i], html[i+1]);

                // 마커를 생성한다
                var marker = new kakao.maps.Marker({
                    position: markerPosition
                });

                // 마커가 지도 위에 표시되도록 설정한다
                marker.setMap(map);
                var iwContent = (" 주소: " + html[i+2] + " 전화번호: " + html[i+3] + " 기관명: " + html[i+4] + " 평일 영업시간: " + html[i+5]), // 인포윈도우에 표춛될 내용
                    iwPosition = new kakao.maps.LatLng(html[i], html[i+1]); // 인포윈도우 표시 위치

                // 인포윈도우를 생성합니다
                var infowindow = new kakao.maps.InfoWindow({
                    position: iwPosition,
                    content: iwContent
                    });
                markers.push(marker);            
                // 이벤트 리스너로는 클로저를 만들어 등록합니다 
                kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));
                }
            };

            // 클러스터러에 마커들을 추가합니다
            clusterer.addMarkers(markers);

            // 인포윈도우를 표시하는 클로저를 만드는 함수입니다 
            function makeOverListener(map, marker, infowindow) {
                return function () {
                    infowindow.open(map, marker);
                };
            }

            // 인포윈도우를 닫는 클로저를 만드는 함수입니다 
            function makeOutListener(infowindow) {
                return function () {
                    infowindow.close();
                };
            }
        </script>
        <div>
            <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
        </div>
    </body>
</html>